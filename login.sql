DROP TABLE locations CASCADE CONSTRAINTS;
DROP TABLE robes CASCADE CONSTRAINTS;
DROP TABLE clients CASCADE CONSTRAINTS;

CREATE TABLE clients (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom VARCHAR2(50)NOT NULL,
    prenom VARCHAR2(50) UNIQUE NOT NULL , 
    adresse VARCHAR2(255)NOT NULL, 
    email VARCHAR2(100) UNIQUE NOT NULL, 
    tel VARCHAR2(20)NOT NULL,
    mdp VARCHAR2(20) NOT NULL
);



CREATE TABLE robes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    description VARCHAR2(255), 
    taille VARCHAR2(50), 
    couleur VARCHAR2(50),
    matiere VARCHAR2(100), 
    prix NUMBER(10,2), 
    disponibilite VARCHAR2(50)
);



CREATE TABLE locations (
    id_location NUMBER PRIMARY KEY,
    id_client NUMBER,
    id_robe NUMBER,
    date_location DATE,
    date_retour_due DATE,
    date_retour DATE,
    nombre_limite NUMBER,
    penalite FLOAT
);

ALTER TABLE locations
ADD CONSTRAINT fk_client FOREIGN KEY (id_client) REFERENCES clients(id);

ALTER TABLE locations
ADD CONSTRAINT fk_robe FOREIGN KEY (id_robe) REFERENCES robes(id);



-- Clients
INSERT INTO clients (nom, prenom, adresse, email, tel, mdp) VALUES 
('Ben Mahmoud', 'Leïla', 'Rue des Jasmins, Sfax', 'leila.bm@email.com', '98765432', 'leila123'),
('Al Fassi', 'Samira', 'Avenue Habib Bourguiba, Tunis', 'samira.fassi@email.com', '53426789', 'fassi123'),
('Cherif', 'Yasmina', 'Rue Ibn Khaldoun, Kairouan', 'yasmina.cherif@email.com', '95674321', 'robe1234'),
('Zouari', 'Nour', 'Quartier Ennassim, Sousse', 'nour.zouari@email.com', '54329876', 'nourzouari'),
('Bensalem', 'Hiba', 'Route de La Marsa, Tunis', 'hiba.bensalem@email.com', '96543210', 'hibahiba');

-- Robes
INSERT INTO robes (description, taille, couleur, matiere, prix, disponibilite) VALUES
('Longue', 'M', 'Rouge', 'Soie', 199.99, 'Oui'),
('Longue', 'L', 'Noir', 'Dentelle', 249.50, 'Oui'),
('Courte', 'S', 'Bleu', 'Satin', 179.00, 'Non'),
('Midi', 'M', 'Doré', 'Polyester', 299.99, 'Oui'),
('Midi', 'L', 'Vert', 'Coton', 189.75, 'Oui');

-- Séquence pour les IDs de location
CREATE SEQUENCE location_seq START WITH 100 INCREMENT BY 1;

-- Locations
INSERT INTO locations (
  id_location, id_client, id_robe, date_location, date_retour_due, date_retour, nombre_limite, penalite
) VALUES 
(location_seq.NEXTVAL, 1, 1, DATE '2025-04-01', DATE '2025-04-05', DATE '2025-04-05', 10, 0),
(location_seq.NEXTVAL, 2, 2, DATE '2025-04-03', DATE '2025-04-07', DATE '2025-04-09', 10, 20.0),
(location_seq.NEXTVAL, 3, 3, DATE '2025-04-10', DATE '2025-04-15', NULL, 10, 0),
(location_seq.NEXTVAL, 3, 3, DATE '2025-04-07', DATE '2025-04-17', NULL, 10, 0);



--Afficher toutes les robes 

SELECT * FROM robes;


SELECT 
  r.description AS robe, 
  r.taille, 
  r.couleur, 
  c.nom AS cliente, 
  l.date_location
FROM robes r
JOIN locations l ON r.id = l.id_robe
JOIN clients c ON c.id = l.id_client;


CREATE OR REPLACE PROCEDURE verifier_robes_disponibles (
    p_taille IN VARCHAR2,
    p_couleur IN VARCHAR2,
    p_date_location IN DATE,
    p_result OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_result FOR
    SELECT *
    FROM robes r
    WHERE r.taille = p_taille
      AND r.couleur = p_couleur
      AND r.id NOT IN (
          SELECT l.id_robe
          FROM locations l
          WHERE p_date_location BETWEEN l.date_location AND NVL(l.date_retour_due, l.date_location)
      );
END;

SET SERVEROUTPUT ON;
DECLARE
    v_cursor SYS_REFCURSOR;
    v_id robes.id%TYPE;
    v_description robes.description%TYPE;
    v_taille robes.taille%TYPE;
    v_couleur robes.couleur%TYPE;
    v_matiere robes.matiere%TYPE;
    v_prix robes.prix%TYPE;
    v_dispo robes.disponibilite%TYPE;
BEGIN
    verifier_robes_disponibles('M', 'Rouge', DATE '2025-04-02', v_cursor);

    LOOP
        FETCH v_cursor INTO v_id, v_description, v_taille, v_couleur, v_matiere, v_prix, v_dispo;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Robe ID: ' || v_id || ', Description: ' || v_description || ', Taille: ' || v_taille || ', Couleur: ' || v_couleur);
    END LOOP;

    CLOSE v_cursor;
END;




