/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package src.model;

import src.dao.ConnectionProvider;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.sql.ResultSet;

/**
 *
 * @author DELL
 */
public class Robe {
    public int id;
    public String description;
    public String taille;
    public String couleur;
    public String matiere;
    public double prix;
    public String disponibilite;
    
    public Robe() {
        this.id = 0;
        this.description = "";
        this.taille = "";
        this.couleur = "";
        this.matiere = "";
        this.prix = 0.0;
        this.disponibilite = "";
    }

public Robe(int id, String description, String taille, String couleur, String matiere, double prix, String disponibilite) {
        this.id = id;
        this.description = description;
        this.taille = taille;
        this.couleur = couleur;
        this.matiere = matiere;
        this.prix = prix;
        this.disponibilite = disponibilite;
    }
public static void creerTable(){
        try{
            String robeTable="CREATE TABLE robes (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, description VARCHAR2(255), taille VARCHAR2(50), couleur VARCHAR2(50), matiere VARCHAR2(100), prix NUMBER(10,2), disponibilite VARCHAR2(50) )";
            ConnectionProvider.operations(robeTable, "robeTable created successfully");
}
       catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
}    
    
    
public void save(){
String query = "INSERT INTO robes (description, taille, couleur, matiere, prix, disponibilite) " +
               "VALUES ('" + description + "', '" + taille + "', '" + couleur + "', '" + matiere + "', " + prix + ", '" + disponibilite + "')";
        try{
            ConnectionProvider.operations(query, "Registred successfully");
}
       catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
}
public ArrayList<Robe> getAllRecords(){
    ArrayList<Robe> arrayList = new ArrayList<>();
    

    try {
        ResultSet rs = ConnectionProvider.operations("select * from robes", "");
        while(rs.next()) {
            int id = rs.getInt("id");
            String description = rs.getString("description");
            String taille = rs.getString("taille");
            String couleur = rs.getString("couleur");
            String matiere = rs.getString("matiere");
            double prix = rs.getDouble("prix");
            String disponibilite = rs.getString("disponibilite");

            // Create a new Robe object and add it to the list
            Robe robe = new Robe(id, description, taille, couleur, matiere, prix, disponibilite);
            arrayList.add(robe);
        }
    } catch(Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
    return arrayList;
}
public static int getRobeId(String Robe) {
    for (Robe r : new Robe().getAllRecords()) {
        if (r.description.equals(Robe)) {
            return r.id;
        }
    }
    return -1; // Si non trouv√©e
}


public void update(){
String query = "UPDATE robes SET description='" + description + "', prix=" + prix + ", matiere='" + matiere +"', couleur='" + couleur + "', taille='" + taille + "', disponibilite='" + disponibilite + "' WHERE id=" + id;
    try{
            ConnectionProvider.operations(query, "updated successfully");
}
       catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }        }
public void delete(){
String query = "delete from robes where id ='"+id+"'";
    try{
            ConnectionProvider.operations(query, "deleted successfully");
}
       catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }  

}


public static boolean exists(int robeId) {
    String sql = "SELECT 1 FROM robes WHERE id = ?";
    try (java.sql.Connection con = ConnectionProvider.orclConnection();
         java.sql.PreparedStatement stmt = con.prepareStatement(sql)) {

        stmt.setInt(1, robeId);
        ResultSet rs = stmt.executeQuery();
        return rs.next();  // true si la robe existe

    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}

}